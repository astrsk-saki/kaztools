#! /usr/bin/perl

use strict;
use warnings;
use Errno ();
use Getopt::Long;
use Pod::Usage qw(pod2usage);

our @BINDDIRS = qw(bin lib lib64 sbin usr/bin usr/lib usr/sbin usr/share);

my $root;

GetOptions(
    'root=s' => \$root,
    help     => sub {
        pod2usage(0);
    },
) or exit(1);

# cleanup $root
die "--root not specified\n"
    unless $root;
$root =~ s{/$}{}gs;

# create the directory if not exists
if (! -e $root) {
    mkdir $root
        or die "failed to create directory:$root:$!";
}

# rebind the directories
for my $dir (@BINDDIRS) {
    mkdir_p($dir);
    if (is_empty("$root/$dir")) {
        run_cmd("mount", "--bind", "/$dir", "$root/$dir");
        run_cmd("mount", "-o", "remount,ro", "$root/$dir");
    }
}

# create temporary directories
for my $dir (qw(tmp var/tmp run/lock)) {
    mkdir_p($dir);
    chmod 01777, "$root/$dir"
        or die "failed to chmod $root/$dir:$!";
}

# create other directories
mkdir_p("var/log");

# create symlinks
symlink "../run/lock", "$root/var/lock";

# create devices
mkdir "$root/dev";
run_cmd(qw(mknod -m 666), "$root/dev/null", qw(c 1 3))
    unless -e "$root/dev/null";
run_cmd(qw(mknod -m 666), "$root/dev/zero", qw(c 1 5))
    unless -e "$root/dev/zero";

# just print the status if no args
if (! @ARGV) {
    print "jail is ready!\n";
    exit 0;
}

# chroot and exec
chroot($root)
    or die "failed to chroot to $root:$!";
chdir "/"
    or die "failed to chroot to /:$!";
exec @ARGV;
die "failed to exec:$ARGV[0]:$!";

sub mkdir_p {
    my $dir = shift;
    return if -e "$root/$dir";
    if ($dir =~ m{\/[^/]+$}s) {
        mkdir_p($`);
    }
    mkdir "$root/$dir"
       or die "failed to create directory:$root/$dir:$!";
}

sub run_cmd {
    my @argv = @_;
    system(@argv) == 0
        or die "failed to exec $argv[0]:$!";
}

sub is_empty {
    my $path = shift;
    opendir my $fh, $path
        or die "failed to opendir:$path:$!";
    while (my $fn = readdir $fh) {
        return 0
            unless $fn eq '.' || $fn eq '..';
    }
    return 1;
}

__END__

=head1 NAME

jailing - a minimalistic chroot jail builder/runner for Linux

=head1 SYNOPSIS

  # create and/or enter the jail, and optionally run the command
  jailing --root=/path/to/chroot/jail [cmd ...]

=head1 DESCRIPTION

The command creates a chroot jail if it does not exist, and runs the given commands within the jail.

The system directories are remounted read-only (via `mount --bind` and `mount -o remount,ro`) to minimalize the setup time and disk usage.  Other directories are created automatically.

=head1 OPTIONS

=head2 --root=path

mandatory argument specifying the root of the chroot jail.
The directory is automatically created if it does not exist.

=head1 AUTHOR

Kazuho Oku
